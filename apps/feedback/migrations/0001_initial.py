# Generated by Django 3.2.12 on 2022-04-25 16:50

import apps.feedback.utilities
import apps.feedback.validators
import django.core.validators
from django.db import migrations, models
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('library', '0024_delete_participationapplicationfestival'),
        ('info', '0015_delete_question'),
    ]

    operations = [
        migrations.CreateModel(
            name='ParticipationApplicationFestival',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=50, verbose_name='Фамилия')),
                ('birth_year', models.PositiveSmallIntegerField(validators=[apps.feedback.validators.year_validator], verbose_name='Год рождения')),
                ('city', models.CharField(max_length=50, verbose_name='Город проживания')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(help_text='Номер телефона указывается в формате +7', max_length=128, region=None, verbose_name='Номер телефона')),
                ('email', models.EmailField(max_length=100, verbose_name='Электронная почта')),
                ('title', models.CharField(max_length=200, verbose_name='Название пьесы')),
                ('year', models.PositiveSmallIntegerField(validators=[apps.feedback.validators.year_validator], verbose_name='Год написания')),
                ('file', models.FileField(help_text="Файл в одно из форматов ('doc', 'docx', 'txt', 'odt', 'pdf')", upload_to=apps.feedback.utilities.generate_upload_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'txt', 'odt', 'pdf'))], verbose_name='Файл')),
                ('url_file_in_storage', models.URLField(blank=True, max_length=1024, verbose_name='Ссылка для скачивания файла с Диска')),
                ('verified', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], default=False, verbose_name='Проверена?')),
                ('exported_to_google', models.BooleanField(default=False, editable=False, verbose_name='Выгружена в Google-таблицу')),
                ('saved_to_storage', models.BooleanField(default=False, editable=False, verbose_name='Файл сохранен на Диске')),
                ('sent_to_email', models.BooleanField(default=False, editable=False, verbose_name='Отправлена на почту')),
                ('festival_year', models.PositiveSmallIntegerField(default=apps.feedback.utilities.get_festival_year, verbose_name='Год фестиваля')),
            ],
            options={
                'verbose_name': 'Заявка на участие',
                'verbose_name_plural': 'Заявки на участие',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('question', models.TextField(max_length=500, validators=[django.core.validators.MinLengthValidator(2, 'Вопрос должен состоять более чем из 2 символов')], verbose_name='Текст вопроса')),
                ('author_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('author_email', models.EmailField(max_length=50, verbose_name='Электронная почта')),
                ('sent_to_email', models.BooleanField(default=False, editable=False, verbose_name='Отправлена на почту')),
            ],
            options={
                'verbose_name': 'Вопрос или предложение',
                'verbose_name_plural': 'Вопросы или предложения',
            },
        ),
        migrations.AddConstraint(
            model_name='participationapplicationfestival',
            constraint=models.UniqueConstraint(fields=('first_name', 'last_name', 'birth_year', 'city', 'phone_number', 'email', 'title', 'year'), name='unique_application'),
        ),
    ]
